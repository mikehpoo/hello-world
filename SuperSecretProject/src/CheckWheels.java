/**
 * This class will take wheels generated by RandomiseWheels and test if they have a win line or not
 * For time being win line will mean 2 or more of the same symbols in a row anywhere on a wheel
 * 
 *  (x,x,x,x,x) = biggest win
 *  (x,x,x,x,Y) OR (Y,x,x,x,x,)= 2nd biggest win
 * 	(x,x,x,Y,W) OR (Y,x,x,x,Y) OR (Y,W,x,x,x) = third biggest win
 *  (x,x,Y,W,Z) OR (Y,x,x,Y,Z) OR (Y,Z,x,x,Y) OR (Y,W,Z,x,x) = smallest win
 * 
 */


/**
 * @author mikey
 *
 */
public class CheckWheels {
	public static double TenModifier = 0.2;
	public static double JackModifier = 2;
	public static double QueenModifier = 6;
	public static double KingModifier = 25;
	public static double AceModifier = 200;	
	
	public static int TwoTenMatches = 0;
	public static int ThreeTenMatches = 0;
	public static int FourTenMatches = 0;
	public static int FiveTenMatches = 0;

	
	public static int TwoJackMatches = 0;
	public static int ThreeJackMatches = 0;
	public static int FourJackMatches = 0;
	public static int FiveJackMatches = 0;	
	
	
	public static int TwoQueenMatches = 0;
	public static int ThreeQueenMatches = 0;
	public static int FourQueenMatches = 0;
	public static int FiveQueenMatches = 0;

	public static int TwoKingMatches = 0;
	public static int ThreeKingMatches = 0;
	public static int FourKingMatches = 0;
	public static int FiveKingMatches = 0;

	public static int TwoAceMatches = 0;
	public static int ThreeAceMatches = 0;
	public static int FourAceMatches = 0;	
	public static int FiveAceMatches = 0;
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method

	}
	
	public static void incrementFields(int NumberOfMatches, double Modifier){
		if (Modifier == TenModifier){switch(NumberOfMatches){
			case 1: TwoTenMatches++;
			break;
			case 2: ThreeTenMatches++;
			break;
			case 3: FourTenMatches++;
			break;
			case 4: FiveTenMatches++;
			break;
		}} else if (Modifier == JackModifier){switch(NumberOfMatches){
			case 1: TwoJackMatches++;
			break;
			case 2: ThreeJackMatches++;
			break;
			case 3: FourJackMatches++;
			break;
			case 4: FiveJackMatches++;
			break;
		}} else if (Modifier == QueenModifier){switch(NumberOfMatches){
			case 1: TwoQueenMatches++;
			break;
			case 2: ThreeQueenMatches++;
			break;
			case 3: FourQueenMatches++;
			break;
			case 4: FiveQueenMatches++;
			break;
		}} else if (Modifier == KingModifier){switch(NumberOfMatches){
			case 1: TwoKingMatches++;
			break;
			case 2: ThreeKingMatches++;
			break;
			case 3: FourKingMatches++;
			break;
			case 4: FiveKingMatches++;
			break;
		}} else if (Modifier == AceModifier){switch(NumberOfMatches){
			case 1: TwoAceMatches++;
			break;
			case 2: ThreeAceMatches++;
			break;
			case 3: FourAceMatches++;
			break;
			case 4: FiveAceMatches++;
			break;
}}
		
	}
	
	public static double checkWheels(int[][] wheels, int NumberOfPayLines){	
		double value = 0;
		int NumberOfMatches = 0;
		double Modifier = 0;
		switch(NumberOfPayLines){
		case 1: 
			value = -1;
			NumberOfMatches = numberOfMatchesOnLine(wheels[0][1],wheels[1][1],wheels[2][1],wheels[3][1],wheels[4][1]);	
			Modifier = getModifier(wheels[0][1]);
			incrementFields(NumberOfMatches, Modifier);
			value = value + (NumberOfMatches * Modifier);
			break;
		case 2:
			value = -2;
			NumberOfMatches = numberOfMatchesOnLine(wheels[0][1],wheels[1][1],wheels[2][1],wheels[3][1],wheels[4][1]);	
			Modifier = getModifier(wheels[0][1]);
			incrementFields(NumberOfMatches, Modifier);
			value = value + (NumberOfMatches * Modifier);
			NumberOfMatches = numberOfMatchesOnLine(wheels[0][2],wheels[1][2],wheels[2][2],wheels[3][2],wheels[4][2]);	
			Modifier = getModifier(wheels[0][2]);
			incrementFields(NumberOfMatches, Modifier);
			value = value + (NumberOfMatches * Modifier);
			break;
		case 3:
			value = -3;
			NumberOfMatches = numberOfMatchesOnLine(wheels[0][1],wheels[1][1],wheels[2][1],wheels[3][1],wheels[4][1]);	
			Modifier = getModifier(wheels[0][1]);
			incrementFields(NumberOfMatches, Modifier);
			value = value + (NumberOfMatches * Modifier);
			NumberOfMatches = numberOfMatchesOnLine(wheels[0][2],wheels[1][2],wheels[2][2],wheels[3][2],wheels[4][2]);	
			Modifier = getModifier(wheels[0][2]);
			incrementFields(NumberOfMatches, Modifier);
			value = value + (NumberOfMatches * Modifier);
			NumberOfMatches = numberOfMatchesOnLine(wheels[0][3],wheels[1][3],wheels[2][3],wheels[3][3],wheels[4][3]);	
			Modifier = getModifier(wheels[0][3]);
			incrementFields(NumberOfMatches, Modifier);
			value = value + (NumberOfMatches * Modifier);
			break;
		}		
		
		//checks for symbol matching quantities
		
		return value;
	}
	
	public static int numberOfMatchesOnLine(int i,int j, int k, int l, int m){
		if(i == j){
			if(j == k){
				if(k == l){
					if(l == m){
						return 4;
					}
					return 3;
				}
				return 2;
			}			
			return 1;
		}
		else{
			return 0;
		}
	}

	public static double getModifier(int num){
		double modifier = 0;
		switch(num){
		case 0 :
			modifier = TenModifier;
			break;
		case 1 :
			modifier = JackModifier;
			break;
		case 2 :
			modifier = QueenModifier;
			break;
		case 3 :
			modifier = KingModifier;
			break;
		case 4 :
			modifier = AceModifier;
			break;		
		}		
		return modifier;
	}

	public static int getTwoTenMatches() {
		return TwoTenMatches;
	}

	public static int getThreeTenMatches() {
		return ThreeTenMatches;
	}

	public static int getFourTenMatches() {
		return FourTenMatches;
	}

	public static int getFiveTenMatches() {
		return FiveTenMatches;
	}

	public static int getTwoJackMatches() {
		return TwoJackMatches;
	}

	public static int getThreeJackMatches() {
		return ThreeJackMatches;
	}

	public static int getFourJackMatches() {
		return FourJackMatches;
	}

	public static int getFiveJackMatches() {
		return FiveJackMatches;
	}

	public static int getTwoQueenMatches() {
		return TwoQueenMatches;
	}

	public static int getThreeQueenMatches() {
		return ThreeQueenMatches;
	}

	public static int getFourQueenMatches() {
		return FourQueenMatches;
	}

	public static int getFiveQueenMatches() {
		return FiveQueenMatches;
	}

	public static int getTwoKingMatches() {
		return TwoKingMatches;
	}

	public static int getThreeKingMatches() {
		return ThreeKingMatches;
	}

	public static int getFourKingMatches() {
		return FourKingMatches;
	}

	public static int getFiveKingMatches() {
		return FiveKingMatches;
	}

	public static int getTwoAceMatches() {
		return TwoAceMatches;
	}

	public static int getThreeAceMatches() {
		return ThreeAceMatches;
	}

	public static int getFourAceMatches() {
		return FourAceMatches;
	}

	public static int getFiveAceMatches() {
		return FiveAceMatches;
	}
	public static double getTenModifier() {
		return TenModifier;
	}

	public static double getJackModifier() {
		return JackModifier;
	}

	public static double getQueenModifier() {
		return QueenModifier;
	}

	public static double getKingModifier() {
		return KingModifier;
	}

	public static double getAceModifier() {
		return AceModifier;
	}
	
}
